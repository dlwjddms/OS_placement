#include <stdio.h>

void alloctest(void){



        palloc_get_status(0);

        size_t i;
        char * mem[10];


	printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
        for (i=0; i<2; i++) {
	
	                mem[i] = (char *)malloc(1024 * 20);
			if(mem[i]==NULL)
				printf("#####################################\n");
	                memset(mem[i], 0X00, 2048*200);
	                printf("After allocation of 101 page \n");
	                printf("page status : \n");
			palloc_get_status(0);

	}

	
	printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");

	for (i=2; i<4; i++) {

		mem[i] = (char *)malloc(2048 * 158);
		if(mem[i]==NULL)
				printf("#####################################\n");
	                
		memset(mem[i], 0X00, 2048*158);
		printf("After allocation of 80 page \n");
		printf("page status : \n");
		palloc_get_status(0);

	}
	printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
	mem[4] = (char *)malloc(2048 * 98);
	memset(mem[i],0X00, 2048*98);
	printf("After allocation of 50 page \n");
	printf("page status : \n");
	palloc_get_status(0);

	free(mem[1]);
	printf("After free of 105 ~ 205 page\n");
	printf("page status : \n");
	palloc_get_status(0);

	free(mem[3]);
	printf("After free of 286 ~ 365 page\n");
	printf("page status : \n");
	palloc_get_status(0);

	mem[1] = (char *)malloc(2048 * 118);
	if(mem[1]==NULL)
				printf("#####################################\n");
	                
	memset(mem[1],0X00, 2048*118);
	printf("After allocation of 60 page \n");
	printf("page status : \n");
	palloc_get_status(0);

	mem[3] = (char *)malloc(2048 * 178);
if(mem[3]==NULL)
				printf("#####################################\n");
	                
	memset(mem[3],0X00, 2048*178);
	printf("After allocation of 90 page \n");
	printf("page status : \n");
	palloc_get_status(0);

	mem[5] = (char *)malloc(2048 * 28);
if(mem[5]==NULL)
				printf("#####################################\n");
	                
	memset(mem[5],0X00, 2048*28);
	printf("After allocation of 15 page \n");
	printf("page status : \n");
	palloc_get_status(0);

}


void alloctest1(void)
	//irintf("for %d index group R 1 - %d \n",page_cnt, bud[page_cnt].used_bud[1] );
{
	printf("implement page allocation test!!!\n");

//size_t i;
  //   char* dynamicmem[20];
     char* namicmem[20];

	   palloc_get_status(0);
/*
	   for (i = 0; i < 3; i++) {
		          dynamicmem[i] = (char *)malloc(1024*4);
			  memset(dynamicmem[i], 0x00, 1024*4);
			  printf("dump page status-1: \n");
		          palloc_get_status(0);
			  dynamicmem[i] = (char *)malloc(1024*16);
			  memset(dynamicmem[i], 0x00, 1024*16);

			  printf("dump page status-2: \n");
		          palloc_get_status(0);
						    }
*/
	   /*
	   size_t i;
	         char* dynamicmem[20];

		       for (i = 0; i < 10; i++) {
			              dynamicmem[i] = (char *)malloc(2048*5);
				             memset(dynamicmem[i], 0x00, 2048*5);
					            printf("dump page status : \n");
						           palloc_get_status(0);
							       }

		           for (i = 1; i < 3; i++) {
				          free(dynamicmem[i]);
					         printf("dump page status after free: \n");
						        palloc_get_status(0);
							    }
			    
			       for (i = 1; i < 3; i++) {
				              dynamicmem[i] = (char *)malloc(2048 * 10);
					             memset(dynamicmem[i], 0x00, 2048 * 10);
						            printf("dump page status after bigger allocation : \n");
							           palloc_get_status(0);
								       }  

			           for (i = 3; i < 7; i++) {
					          free(dynamicmem[i]);
						         printf("dump page status after bigger status: \n");
							        palloc_get_status(0);
								    }
	*/			    

	   size_t i;
	         char* dynamicmem[20];

		       for (i = 0; i < 10; i++) {
			              dynamicmem[i] = (char *)malloc(2048*5);
				             memset(dynamicmem[i], 0x00, 2048*5);
					            printf("dump page status : \n");
						           palloc_get_status(0);
							       }

		           for (i = 1; i < 3; i++) {
				          free(dynamicmem[i]);
					         printf("dump page status : \n");
						        palloc_get_status(0);
							    }
			    
			       for (i = 1; i < 3; i++) {
				              dynamicmem[i] = (char *)malloc(2048 * 10);
					             memset(dynamicmem[i], 0x00, 2048 * 10);
						            printf("dump page status : \n");
							           palloc_get_status(0);
								       }  

			           for (i = 3; i < 7; i++) {
					          free(dynamicmem[i]);
						         printf("dump page status : \n");
							        palloc_get_status(0);
								    }

				      dynamicmem[3] = (char*) malloc(4096 * 3);
				         memset(dynamicmem[3], 0x00, 4096 * 3);
					     printf("dump page status : \n");
					         palloc_get_status(0);
  printf("%p\n", dynamicmem[3]);

     dynamicmem[4] = (char*) malloc(4096 * 8);
        memset(dynamicmem[3], 0x00, 4096 * 8);
	    printf("dump page status : \n");
	        palloc_get_status(0);
		   printf("%p\n", dynamicmem[4]);
						    // compiler optimization barrier
						    //    printf("%p\n", dynamicmem[3]);
						    //
						    //       dynamicmem[4] = (char*) malloc(4096 * 8);
						    //          memset(dynamicmem[3], 0x00, 4096 * 8);
						    //              printf("dump page status : \n");
						    //                  palloc_get_status(0);
						    //
						    //                     // compiler optimization barrier
						    //                        printf("%p\n", dynamicmem[4]);
						    //
						    //
						   // palloc_get_status(0);
}
